# -*- coding: utf-8 -*-
"""consultas_proy_mongodb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/hhigueran/434becf0de46f3c86cf86a11f07a9287/consultas_proy_mongodb.ipynb

## **Proyecto - MongoDB**
---
Las siguientes tres celdas de código, como se vio en el notebook `conceptos_mongo.py` son para la preparación de las herramientas *Python* necesarias para poder ejecutar *querys* de *MQL (MongoDB Query Language)* desde este lenguaje.

Instalando *PyMongo*:
"""

# TEST_CELL
!python -m pip install 'pymongo[srv]'==4.2.0

"""Se importa `MongoClient` para poder conectarse a *MongoDB Atlas Database* y `json` para poder importar el grupo de datos a utilizar:"""

# TEST_CELL
from pymongo import MongoClient
import json

"""Para conectar a *MongoDB Atlas Database*:"""

# Cadena de conexión
connection_str = "mongodb+srv://hhigueran:beto19411626@bigdata2023.w3mo0gr.mongodb.net/?retryWrites=true&w=majority"
client = MongoClient(connection_str)

"""## Preparación de base de datos en *MongoDB*
---

Se selecciona en *MongoDB* la **base de datos** a usar para el proyecto:
"""

db = client["DocFallos"]

"""Seleccionando la **colección** a usar en las consultas al Proyecto:"""

collection = db["documentos"]

"""La siguiente consulta retorna un elemento de la colección, se hace para conocer la *forma* o *estructura de campos* que hay en "todos" los documentos (para esta colección todos los documentos tienen la misma estructura pero recuerde que cada documento puede tener diferente estructura de campos si así se desea). **Si al momento de solucionar algún ejercicio olvida la *estructura de campos* rediríjase a esta sección para recordarlo:**"""

collection.find_one()

"""> **Warning:** En este taller cuando se usa el término *calificación* se refiere al campo `score` que está dentro del campo `grades` que es un arreglo; cuando se usa el término *nota* se refiere al campo `grade`(**no** `grades`, note la direferencia entre el plural y el singular).

## Formato de salida
---
La función `print_result`, prediseñada para el taller, permite mostrar el retorno de las querys de una forma más amigable. Si lo desea, no use esta función, con la función `print` built-in de *Python* también es posible, pero el retorno de los querys será más desafiante de leer:
"""

def print_result(data):
    json_data = json.dumps(data, indent=4, sort_keys=True)
    print(json_data)

"""## **1. Consulta de Documentos por Providencia**
---
En este primer ejercicico usted debe implementar una *consulta* válida de **MQL (MongoDB Query Language)** mediante la función `query_name_type` que retorne dos `dict`, el primero representa el *query* o *filtro*, y el segundo la *proyección del query*. Su trabajo radica en retornar **TODOS** los documentos de la colección `documentos`.

**Parámetros**

* Providencia

**Retorna**

* `query` o `filtro`: `dict` válido como consulta de **MQL**
* `proyección`: `dict` válido representando la proyección
"""

def query_providencia(providencia):
    query = {"Providencia": providencia}
    projection = {"_id": False}
    return query, projection

print("Providencia: ")
providencia = input()
print_result(list(collection.find(*query_providencia(providencia)))[:20])
#C-065-21.pdf

"""## **2. Consulta de Documentos por Tipo**
---
En este ejercicico se debe implementar una *consulta* válida de **MQL (MongoDB Query Language)** mediante la función `query_name_type` que retorne dos `dict`, el primero representa el *query* o *filtro*, y el segundo la *proyección del query*. Su trabajo radica en retornar **TODOS** los documentos de la colección `documentos`.

**Parámetros**

* Tipo

**Retorna**

* `query` o `filtro`: `dict` válido como consulta de **MQL**
* `proyección`: `dict` válido representando la proyección
"""

def query_tipo(tipo):
    query = {"Tipo": tipo}
    projection = {"_id": False}
    return query, projection

print("Tipo: ")
tipo = input()
print_result(list(collection.find(*query_tipo(tipo)))[:20])
#Auto

"""## **3. Consulta de Documentos por un año específico**
---
En este ejercicico se debe implementar una *consulta* válida de **MQL (MongoDB Query Language)** mediante la función `query_name_type` que retorne dos `dict`, el primero representa el *query* o *filtro*, y el segundo la *proyección del query*. Su trabajo radica en retornar **TODOS** los documentos de la colección `documentos`.

**Parámetros**

* Año

**Retorna**

* `query` o `filtro`: `dict` válido como consulta de **MQL**
* `proyección`: `dict` válido representando la proyección
"""

def query_ano(ano):
    query = {"AnoPublicacion": ano}
    projection = {"_id": False}
    return query, projection

print("Año de Publicación: ")
ano = input()
print_result(list(collection.find(*query_ano(ano)))[:20])
#2023

"""## **4. Consulta de Documentos por un rango de fechas específico**
---
En este ejercicico se debe implementar una *consulta* válida de **MQL (MongoDB Query Language)** mediante la función `query_name_type` que retorne dos `dict`, el primero representa el *query* o *filtro*, y el segundo la *proyección del query*. Su trabajo radica en retornar **TODOS** los documentos de la colección `documentos`.

**Parámetros**

* Fecha Inicial
* Fecha Final

**Retorna**

* `query` o `filtro`: `dict` válido como consulta de **MQL**
* `proyección`: `dict` válido representando la proyección
"""

def query_range_fecPub(fec_ini, fec_fin):
    query = {"$and": [{"FechaPublicacion": {"$gte":fec_ini}},{"FechaPublicacion": {"$lte":fec_fin}}]}
    projection = {"_id": False}
    return query, projection

print("Fecha Inicial (YYYY-MM-DD): ")
fec_ini = input()
print("Fecha Final (YYYY-MM-DD): ")
fec_fin = input()
print_result(list(collection.find(*query_range_fecPub(fec_ini, fec_fin)))[:5])

"""## **5. Consulta de Documentos por cualquier texto**
---
En este ejercicico se debe implementar una *consulta* válida de **MQL (MongoDB Query Language)** mediante la función `query_name_type` que retorne dos `dict`, el primero representa el *query* o *filtro*, y el segundo la *proyección del query*. Su trabajo radica en retornar **TODOS** los documentos de la colección `documentos`.

**Parámetros**

* Texto

**Retorna**

* `query` o `filtro`: `dict` válido como consulta de **MQL**
* `proyección`: `dict` válido representando la proyección
"""

# Crear un índice en el campo Texto
collection.create_index([('Texto', 'text')])

# Realizar una consulta de texto completo
search_term = 'violacion'
result = collection.find({'$text': {'$search': search_term}})

# Imprimir los resultados
for document in result:
    print(document)

# Instalación de Streamlit
!pip install streamlit pymongo

# Importa las bibliotecas necesarias
import streamlit as st
from pymongo import MongoClient


# Define la función de búsqueda en MongoDB
def buscar_documento(busqueda):
    resultado = coleccion.find_one({"campo_de_busqueda": busqueda})
    return resultado

# Configura la aplicación Streamlit
def main():
    st.title("Aplicación de Búsqueda en MongoDB")

    # Caja de texto para ingresar el término de búsqueda
    termino_busqueda = st.text_input("Ingrese el término de búsqueda:")

    # Botón de búsqueda
    if st.button("Buscar"):
        if termino_busqueda:
            # Realiza la búsqueda en MongoDB
            resultado = buscar_documento(termino_busqueda)

            # Muestra el resultado en la interfaz
            if resultado:
                st.success("Documento encontrado:")
                st.json(resultado)
            else:
                st.warning("Documento no encontrado.")
        else:
            st.warning("Ingrese un término de búsqueda.")

# Ejecuta la aplicación
if __name__ == "__main__":
    main()